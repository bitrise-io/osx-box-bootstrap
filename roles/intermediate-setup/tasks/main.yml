---
#
# Required param checks
- debug: msg=" (!) Incremental Setup? {{ is_incremental_setup|default(false) }}"

# Setup the debug log file for custom scripts
#  [!] Collect custom script outputs to ~/Desktop/debug.log, for inspection.
# You can inspect it during setup with $ tail -f ~/Desktop/debug.log
#  custom installer scripts use this debug log file
- name: Setup the debug log file for custom scripts
  file: path=/Users/{{ param_user }}/Desktop/debug.log
    state=touch
    owner="{{ param_user }}"
    mode=0644

#
# Add user to sudoers-no-password
#  don't require password for running sudo with this user
- name: "Add user {{ param_user }} to sudoers with no password"
  become: yes
  lineinfile: "dest=/etc/sudoers
    regexp='^{{ param_user }} ALL'
    line='{{ param_user }} ALL=(ALL) NOPASSWD: ALL'
    state=present
    validate='visudo -cf %s'"

#
# Switch to Xcode stable, for brew-ing and anything else
#  what requires Xcode / Xcode Command Line Tools (e.g. Ruby gems
#  with native extension)
- name: xcode-select
  shell: bash -l -c "xcode-select --switch {{ xcode_path }}"
  become: yes
# iOS Simulator list. Call it at least once to initialize these.
# It seems since Xcode 8.3 only the first run
# initializes the Simulator UDIDs, if we don't call it
# during provisioning the UDIDs will change for every boot
# and `xcrun simctl list` will take quite some time (~60 seconds).
- name: xcrun simctl list
  shell: bash -l -c "xcrun simctl list"
  become: yes
# Enable Developer Mode. Without this Xcode.app might block UI Tests,
# waiting for manual input (password). Since Xcode 9.3 it seems this is
# the only way to accept the permissions required for iOS UI Tests,
# if you only accept it via the GUI that won't persist after an OS reboot,
# but running this command will.
- name: "Enable Developer Mode"
  shell: sudo DevToolsSecurity -enable
  become: yes

# Turn off automatic update
- name: Turn off macos automatic software updates
  shell: softwareupdate --schedule off
  become: yes

# Turn off APSD
- name: "Turn off apsd - can be a CPU hog"
  shell: sudo launchctl unload -w /System/Library/LaunchDaemons/com.apple.apsd.plist
  become: yes

#
# Install and update homebrew
- name: run brew installer script
  script: install_brew.sh creates=/usr/local/bin/brew
- name: brew update
  homebrew: update_homebrew=yes upgrade_all=no
# brew some commands
- name: brew install git
  homebrew: name=git state=present
- name: brew install wget
  homebrew: name=wget state=present
- name: brew install mercurial
  homebrew: name=mercurial state=present
- name: brew install node
  homebrew: name=node@10 state=present # Node LTS 10.x
- name: brew link node@10
  command: /usr/local/bin/brew link --overwrite --force node@10 # force link Node LTS 10.x
- name: brew install ansible
  homebrew: name=ansible state=present
- name: brew install coreutils
  homebrew: name=coreutils state=present
- name: brew install watchman
  homebrew: name=watchman state=present
- name: brew install flow
  homebrew: name=flow state=present
- name: brew install tree
  homebrew: name=tree state=present
- name: brew install carthage
  homebrew: name=carthage state=present
- name: brew install imagemagick
  homebrew: name=imagemagick state=present
- name: brew install ghostscript
  homebrew: name=ghostscript state=present
- name: brew install yarn
  homebrew: name=yarn state=present
- name: brew install screen
  homebrew: name=screen state=present
- name: brew install readline
  homebrew: name=readline state=present

- name: brew install java
  homebrew_cask: name=java state=present

# Ruby
- name: brew install rbenv
  homebrew: name=rbenv state=latest
- name: Install ruby {{ default_ruby }}
  shell: bash -l -c "rbenv install --skip-existing {{ default_ruby }}"
  when: is_incremental_setup|default(false) == false
- name: Set ruby {{ default_ruby }} to global
  shell: bash -l -c "rbenv global {{ default_ruby }}"
  when: is_incremental_setup|default(false) == false
- name: Install ruby 2.5.3
  shell: bash -l -c "rbenv install --skip-existing 2.5.3"
  when: is_incremental_setup|default(false) == false
- name: Install ruby 2.4.5
  shell: bash -l -c "rbenv install --skip-existing 2.4.5"
  when: is_incremental_setup|default(false) == false


## Go
# Gopath is $HOME/go
- name: brew install go
  homebrew: name=go state=present
- name: prepare GOPATH dirs
  file: path="/Users/{{ param_user }}/go/{{ item.fold_path }}"
    state=directory
    owner="{{ param_user }}"
  with_items:
    - { fold_path: 'src' }
    - { fold_path: 'bin' }
    - { fold_path: 'pkg' }


# Default ruby version (brew installed ruby)
- name: update rubygems
  shell: bash -l -c "gem update --system --no-document"
  when: is_incremental_setup|default(false) == false
- name: gem install tools
  shell: bash -l -c "gem install --no-document cocoapods nomad-cli xcpretty fastlane"
  when: is_incremental_setup|default(false) == false
- name: bundle version
  shell: bash -l -c "bundle --version"
  when: is_incremental_setup|default(false) == false
# GEMs: Cocoapods
- name: pod setup
  shell: bash -l -c "pod setup || pod setup"
  when: is_incremental_setup|default(false) == false

# NPM global packages
- name: Install "ionic" NodeJS package globally
  npm:
    name: ionic
    global: yes
  when: is_incremental_setup|default(false) == false

- name: Install "cordova" NodeJS package globally
  npm:
    name: cordova
    global: yes
  when: is_incremental_setup|default(false) == false

# Git LFS
- name: "brew install git lfs"
  homebrew: name=git-lfs state=present
- name: "run git lfs install"
  shell: bash -l -c 'git lfs install'

#
# Setup Bitrise specific folders
#
# Setup the base folders / paths, referenced by ~/.profiles/bitrise_profile
# These folders will be created in the HOME directory.
- name: Setup Bitrise specific folders
  file: path="/Users/{{ param_user }}/{{ item.fold_path }}"
    state=directory
    owner="{{ param_user }}"
  with_items:
    # BITRISE_SOURCE_DIR
    - { fold_path: 'git' }
    # BITRISE_STEP_DIR
    - { fold_path: 'stepdir' }
    # BITRISE_DEPLOY_DIR
    - { fold_path: 'deploy' }
    # BITRISE_LIBRARY_DIR
    - { fold_path: 'Library/MobileDevice/Provisioning Profiles' }
    # BITRISE_PROFILE_DIR
    - { fold_path: 'profiles' }
    # BITRISE_SYM_ROOT
    - { fold_path: 'build' }
    # BITRISE_OBJ_ROOT
    - { fold_path: 'bin' }
    # BITRISE_FOLDER_PATH
    - { fold_path: 'bitrise' }
    # BITRISE_STEP_DATA_FOLDER_PATH
    - { fold_path: 'bitrise/stepdata' }
    #
    - { fold_path: 'bitrise/tools' }

# Sync the tools/ dir
- name: Sync the tools dir
  synchronize: src=tools/ dest="/Users/{{ param_user }}/bitrise/tools/"

#
# Install cmd-bridge
- name: run cmd-bridge installer script
  script: install_cmd-bridge.sh

#
# Switch to Xcode stable, the default Xcode for building
- name: Switch to Xcode stable, the default Xcode for building
  shell: bash -l -c "xcode-select --switch {{ xcode_path }}"
  become: yes
