---
# install additional ruby versions
- name: Install ruby 2.5.3
  shell: bash -l -c "rbenv install --skip-existing 2.5.3"
  when: is_incremental_setup|default(false) == false
- name: Install ruby 2.4.5
  shell: bash -l -c "rbenv install --skip-existing 2.4.5"
  when: is_incremental_setup|default(false) == false

- gem: # noqa 502 All tasks should be named
    name: "{{ item }}"
    state: latest # noqa 403 Package installs should not use latest
    executable: "/Users/{{ param_user }}/.rbenv/shims/gem"
    user_install: no
  loop:
    - "cocoapods"
    - "nomad-cli"
    - "xcpretty"

# GEMs: Cocoapods
- name: pod setup
  shell: bash -l -c "pod setup || pod setup"
  when: is_incremental_setup|default(false) == false
- name: CocoaPods specs install
  shell: bash -l -c "pod repo add master https://github.com/CocoaPods/Specs.git"
  when: is_incremental_setup|default(false) == false

# brew some commands
- name: brew install git
  homebrew: name=git state=present
- name: brew install wget
  homebrew: name=wget state=present
- name: brew install mercurial
  homebrew: name=mercurial state=present
- name: brew install node
  homebrew: name=node@10 state=present # Node LTS 10.x
- name: brew link node@10
  command: /usr/local/bin/brew link --overwrite --force node@10 # force link Node LTS 10.x
- name: brew install ansible
  homebrew: name=ansible state=present
- name: brew install coreutils
  homebrew: name=coreutils state=present
- name: brew install watchman
  homebrew: name=watchman state=present
- name: brew install flow
  homebrew: name=flow state=present
- name: brew install tree
  homebrew: name=tree state=present
- name: brew install carthage
  homebrew: name=carthage state=present
- name: brew install imagemagick
  homebrew: name=imagemagick state=present
- name: brew install ghostscript
  homebrew: name=ghostscript state=present
- name: brew install yarn
  homebrew: name=yarn state=present
- name: brew install screen
  homebrew: name=screen state=present
- name: brew install readline
  homebrew: name=readline state=present

- name: brew install java
  homebrew_cask: name=java state=present

# curl used in place of get_url or uri module
# Shells that use pipes should set the pipefail option
- name: "Firebase (CLI)" # noqa 303 306
  shell: bash -l -c "curl -sL firebase.tools | bash"
  become: yes

## Go
# Gopath is $HOME/go
- name: brew install go
  homebrew: name=go state=present
- name: prepare GOPATH dirs
  file: path="/Users/{{ param_user }}/go/{{ item.fold_path }}"
    state=directory
    owner="{{ param_user }}"
  with_items:
    - { fold_path: 'src' }
    - { fold_path: 'bin' }
    - { fold_path: 'pkg' }

# NPM global packages
- name: Install "ionic" and "cordova" NodeJS packages globally
  shell: bash -l -c "npm install -g ionic cordova"

# Git LFS
- name: "brew install git lfs"
  homebrew: name=git-lfs state=present
- name: "run git lfs install"
  shell: bash -l -c 'git lfs install'

#
# Setup Bitrise specific folders
#
# Setup the base folders / paths, referenced by ~/.profiles/bitrise_profile
# These folders will be created in the HOME directory.
- name: Setup Bitrise specific folders
  file: path="/Users/{{ param_user }}/{{ item.fold_path }}"
    state=directory
    owner="{{ param_user }}"
  with_items:
    # BITRISE_SOURCE_DIR
    - { fold_path: 'git' }
    # BITRISE_STEP_DIR
    - { fold_path: 'stepdir' }
    # BITRISE_DEPLOY_DIR
    - { fold_path: 'deploy' }
    # BITRISE_LIBRARY_DIR
    - { fold_path: 'Library/MobileDevice/Provisioning Profiles' }
    # BITRISE_PROFILE_DIR
    - { fold_path: 'profiles' }
    # BITRISE_SYM_ROOT
    - { fold_path: 'build' }
    # BITRISE_OBJ_ROOT
    - { fold_path: 'bin' }
    # BITRISE_FOLDER_PATH
    - { fold_path: 'bitrise' }
    # BITRISE_STEP_DATA_FOLDER_PATH
    - { fold_path: 'bitrise/stepdata' }
    #
    - { fold_path: 'bitrise/tools' }

# Sync the tools/ dir
- name: Sync the tools dir
  synchronize: src=tools/ dest="/Users/{{ param_user }}/bitrise/tools/"

#
# Install python3
- name: Install python@3
  homebrew:
    name: python@3
    state: present
