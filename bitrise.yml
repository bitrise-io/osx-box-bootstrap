format_version: 1.1.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git
project_type: ""
app:
  envs:
  - ANSIBLE_HOST_KEY_CHECKING: "False"
  - VM_BUILD_IP: $VM_BUILD_IP
  - XCODE_PATH: $XCODE_PATH
trigger_map:
- push_branch: step/1
  workflow: provision-vm
- push_branch: step/2
  workflow: perform-weekly-cache-update
- push_branch: step/xamarin
  workflow: provision-xamarin-vm
workflows:

  ci:
    steps:
    - script:
        title: Setup pip3
        run_if: .IsCI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            # Only install pip3 on Linux stacks. OSX stacks already has it.
            if [[ "$OSTYPE" == *"linux"* ]]; then
                sudo apt update
                sudo apt install -y python3-pip
            fi
            pip3 --version
    - script:
        title: Install ansible-lint ver = ANSIBLE_LINT_VER
        run_if: .IsCI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            pip3 install "ansible-lint==${ANSIBLE_LINT_VER}" --force-reinstall
            ansible-lint --version
    - script:
        title: Install yamllint ver = YAML_LINT_VER
        run_if: .IsCI
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            pip3 install "yamllint==${YAML_LINT_VER}" --force-reinstall
            yamllint --version
    - script:
        title: Validate bitrise.yml
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            bitrise validate -c ./bitrise.yml
    - script:
        title: Lint Ansible playbooks
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            for f in $(find . -name '*playbook.yml'); do
              ansible-lint -c ansible-lint.yaml "$f"
            done
    - script:
        title: Run Yamllint
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            yamllint -c ./yamllint.yaml .
    - build-router-start@0.11.3:
        run_if: .IsCI
        inputs:
        - wait_for_builds: "true"
        - workflows: |-
            intermediate-setup-test
            weekly-cache-update-test
        - access_token: $BITRISE_ACCESS_TOKEN

  perform-weekly-cache-update:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            ansible-playbook -v --private-key ./vagrant-insecure_private_key -i "${VM_BUILD_IP}", "./weekly-cache-update-playbook.yml"

  perform-weekly-cache-update-with-inventory:
    description: |-
      Runs `ansible` with the `weekly-cache-update-playbook.yml` playbook,
      to update the pre-installed tools' caches
    envs:
    - INVENTORY_PTH: ./_tmp/weekly-update-inventory
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            ansible-playbook -i "$INVENTORY_PTH" --private-key ./vagrant-insecure_private_key "./weekly-cache-update-playbook.yml"

  provision-vm:
    description: |-
      Runs `ansible` with the `playbook.yml` playbook, to provision the
      Virtual Machine. After this the VM should be completely ready,
      you just have to save it / package it / distribute it.
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -x
            ansible-playbook -v -e xcode_path="${XCODE_PATH}" --private-key ./vagrant-insecure_private_key -i "${VM_BUILD_IP}", "./playbook.yml"

  provision-xamarin-vm:
    description: |-
      Runs `ansible` with the `xamarin-playbook.yml` playbook, to provision the
      Virtual Machine. After this the VM should be completely ready,
      you just have to save it / package it / distribute it.
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -x
            ansible-playbook -v --private-key ./vagrant-insecure_private_key -i "${VM_BUILD_IP}", "./xamarin-playbook.yml"

  _ansible-play:
    steps:
      - script:
          title: pod repo remove master
          run_if: .IsCI
          inputs:
            - content: |-
                #!/usr/bin/env bash
                set -ex
                #Originally the command was pod repo remove master, it just erased the dir under .cocoapods/repos/master.
                #It is huge. Not by size, but the number of files. Instead just moved to /var/tmp it is way faster and it runs only during ci.
                mv ~/.cocoapods/repos/master /var/tmp/
      - script:
          title: Add ansible config
          run_if: .IsCI
          inputs:
            - content: |-
                #!/usr/bin/env bash
                echo -e "[defaults]\ncallback_whitelist=profile_tasks" > ansible.cfg
      - script:
          title: Run Ansible Playbook on CI's build VM
          run_if: .IsCI
          inputs:
            - content: |-
                #!/usr/bin/env bash

                set -ex
                ansible-playbook -e is_ci=true -e xcode_path="$(xcode-select -p)" --connection=local --inventory 127.0.0.1, --limit 127.0.0.1 "${LOCAL_PLAYBOOK_PATH}"
  _cli-version:
    steps:
      - script:
          title: get latest bitrise cli version
          inputs:
            - content: |-
                #!/usr/bin/env bash
                echo $GITHUB_TOKEN
                echo $(curl -H "Authorization: token $GITHUB_TOKEN" --silent https://api.github.com/repos/bitrise-io/bitrise/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/') > cli_version.txt

  weekly-cache-update-test:
    before_run:
      - _cli-version
    after_run:
    - _ansible-play
    envs:
    - LOCAL_PLAYBOOK_PATH: ./weekly-cache-update-playbook.yml

  intermediate-setup-test:
    after_run:
      - _ansible-play
    envs:
      - LOCAL_PLAYBOOK_PATH: ./playbook.yml

  send_lead_time:
    steps:
      - script-runner:
          title: Lead Time KPI
          deps:
            apt_get:
            - name: jq
            brew:
            - name: jq
          inputs:
          - file_path: _scripts/lead_time.sh
      - slack:
          inputs:
            - webhook_url: $SLACK_WEBHOOK_URL_IN
            - channel: $SLACK_CHANNEL_IN
            - message: "$PR_CREATE_TIME - $PR_CLOSED_TIME"
