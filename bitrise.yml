format_version: 1.1.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - ANSIBLE_HOST_KEY_CHECKING: 'False'
  # define these in the .bitrise.secrets.yml
  - VM_BUILD_IP: $VM_BUILD_IP
  # Full, absolute Xcode path, e.g.: /Applications/Xcode.app
  - XCODE_PATH: $XCODE_PATH

trigger_map:
- pattern: step/1
  workflow: vagrant-setup
- pattern: step/2
  workflow: provision-vm
- pattern: step/3
  workflow: perform-weekly-cache-update
- pattern: step/xamarin
  workflow: provision-xamarin-vm

workflows:

  vagrant-setup:
    description: |-
      Runs `ansible` with the `vagrant-setup-playbook`, to have a bare minimum
      `vagrant` ready setup on the target VM.
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            echo " (!!!) When prompted for a password provide the VM's SSH password"
            echo '       should be "vagrant" if you do a default vagrant setup'
            set -x
            ansible-playbook -v --ask-pass -i "${VM_BUILD_IP}", "./vagrant-setup-playbook.yml"

  provision-vm:
    description: |-
      Runs `ansible` with the `playbook.yml` playbook, to provision the
      Virtual Machine. After this the VM should be completely ready,
      you just have to save it / package it / distribute it.
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -x
            ansible-playbook -v -e xcode_path="${XCODE_PATH}" --private-key ./vagrant-insecure_private_key -i "${VM_BUILD_IP}", "./playbook.yml"

  provision-xamarin-vm:
    description: |-
      Runs `ansible` with the `xamarin-playbook.yml` playbook, to provision the
      Virtual Machine. After this the VM should be completely ready,
      you just have to save it / package it / distribute it.
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -e
            set -x
            ansible-playbook -v --private-key ./vagrant-insecure_private_key -i "${VM_BUILD_IP}", "./xamarin-playbook.yml"

  # --- Weekly Cache Update ---
  perform-weekly-cache-update:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            ansible-playbook -v --private-key ./vagrant-insecure_private_key -i "${VM_BUILD_IP}", "./weekly-cache-update-playbook.yml"
  perform-weekly-cache-update-with-inventory:
    description: |-
      Runs `ansible` with the `weekly-cache-update-playbook.yml` playbook,
      to update the pre-installed tools' caches
    envs:
      - INVENTORY_PTH: ./_tmp/weekly-update-inventory
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            ansible-playbook -i "$INVENTORY_PTH" --private-key ./vagrant-insecure_private_key "./weekly-cache-update-playbook.yml"

  ci:
    steps:
    - script:
        title: Install ansible-lint
        run_if: .IsCI
        inputs:
        - content: |-
            #!/bin/bash -l
            set -ex
            pip install ansible-lint
    - script:
        title: Valdate bitrise.yml
        inputs:
        - content: |-
            #!/bin/bash -l
            set -ex

            bitrise validate -c ./bitrise.yml
    - script:
        title: Valdate ansible playbooks
        inputs:
        - content: |-
            #!/bin/bash -l
            set -x # we don't set -e for now because we have some erros

            for f in $(find . -name '*playbook.yml'); do
              ansible-lint "$f"
            done

            exit 0
